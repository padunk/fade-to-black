// Auth
export interface Login {
    email: string
    password: string
}

export interface SignUp extends Login {
    userName: string;
}

export interface Loading {
    errorMessage: string;
    loading: boolean;
}

// Users
export interface UpdateUserProfile {
    bio?: string;
    email: string;
    location?: string;
    website?: string;
}

export interface UserCredentials extends UpdateUserProfile {
    createdAt: number;
    imageURL: string;
    updatedAt: number;
    userID: string;
    userName: string;
}

export interface Likes {
    userName: string | undefined;
    whisperID: string;
}

export interface Notifications {
    createdAt: number;
    read: boolean;
    recipient: string;
    sender: string;
    type: string;
    whisperID: string;
}

export interface User {
    authenticated: boolean;
    credentials: UserCredentials | null;
    likes: Likes[];
    notifications: Notifications[];
}

// Whisper
export interface Comments {
    body: string;
    createdAt: number;
    userName: string;
    whisperID: string;
}

export interface Whisper {
    body: string;
    commentCount: number;
    createdAt: number;
    id: string;
    lifeTime: number;
    likeCount: number;
    userImage: string;
    userName: string;
    comments?: Comments[];
};

// Redux
export interface Data {
    whisper: Whisper;
    whispers: Whisper[];
    loadingData: 'pending' | 'success' | 'error';
    dataError: string;
}

export interface RootState {
    data: Data
    user: User;
    ui: Loading;
}

// JWT Decode
export type JwtToken = {
    username: string;
    iat: number;
    exp: number;
    roles: string[];
  };